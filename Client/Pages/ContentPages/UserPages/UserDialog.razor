<MudDialog>
    <TitleContent>
        @Title  User
    </TitleContent>
    <DialogContent>
        <EditForm Model="@item">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="User Id" @bind-value="item.UserId" ReadOnly=true />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Email " @bind-value="item.Email" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Name " @bind-value="item.Name" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="string" Label="System Role"
                               @bind-Value="item.Role"
                               Dense="true" Required="true">
                        <MudSelectItem Value="0" Disabled="true">Select one...</MudSelectItem>

                        @foreach (var element in dataSelect)
                        {
                            <MudSelectItem Value="@element.Name">@element.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="Save">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public ManageUser item { get; set; } = new();
    [Parameter] public string Title { get; set; }
    [Parameter] public List<SystemRole> dataSelect { get; set; } = new();
    [Parameter] public EventCallback<ManageUser> HandleSaveOperationEvent { get; set; }

    async void Save()
    {
        if (item.UserId <= 0)
        {
            Snackbar.Add("You Need to provide User ID", Severity.Warning);
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(item);
            MudDialog.Close(DialogResult.Ok("Done"));
            // StateHasChanged();
        }
    }
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();
}




@* <SfDialog Width="350px" IsModal=true ShowCloseIcon=true @bind-Visible=IsVisible>
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header>Update User</Header>
        <Content>
            <EditForm Model="ManageUser" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <input class="form-control" @bind="ManageUser.Name" disabled />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email</label>
                            <input class="form-control" @bind="ManageUser.Email" disabled />
                        </div>

                        <div class="form-group mt-3 mb-3">
                            <label class="form-label">Select Role</label>

                            @if (!string.IsNullOrEmpty(ManageUser.Role))
                            {
                                string selected = ManageUser.Role;
                                <SfDropDownList TValue="string" TItem="SystemRole" Placeholder="@selected" DataSource="SystemRoles">
                                    <DropDownListFieldSettings Value="Name" Text="Name" />
                                    <DropDownListEvents TValue="string" TItem="SystemRole" ValueChange="OnValueChange"></DropDownListEvents>
                                </SfDropDownList>
                            }
                            else
                            {
                                <SfDropDownList TValue="string" TItem="SystemRole" Placeholder="Select General Department" DataSource="SystemRoles">
                                    <DropDownListFieldSettings Value="Name" Text="Name" />
                                    <DropDownListEvents TValue="string" TItem="SystemRole" ValueChange="OnValueChange"></DropDownListEvents>
                                </SfDropDownList>
                            }
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Save" Type="ButtonType.Submit" IsPrimary=true OnClick="Save" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter] public ManageUser ManageUser { get; set; } = new();
    [Parameter] public List<SystemRole> SystemRoles { get; set; } = new();
    [Parameter] public EventCallback<ManageUser> HandleSaveOperationEvent { get; set; }

    public bool IsVisible { get; set; } = false;

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }
    async void Save()
    {
        if (string.IsNullOrEmpty(ManageUser.Name) || string.IsNullOrEmpty(ManageUser.Role))
        {
            await dialogService.AlertAsync("You Need to provide Name and the role", "Alert!");
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(ManageUser);
        }
    }
    public void OnValueChange(ChangeEventArgs<string, SystemRole> args)
    {
        ManageUser.Role = args.Value.ToString();
    }

}
 *@