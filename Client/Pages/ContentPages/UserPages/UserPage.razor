@implements IDisposable

@if (allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">User</h4>
                    </div>
                    <div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Role</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ManageUsers is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in ManageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.UserId</td>
                                                <td>@item.Name</td>
                                                <td>@item.Role</td>
                                                <td>@item.</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                    @onclick="()=> EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                    @onclick="()=> DeleteClicked(item)"></i>
                                                </td>
                                            </tr>

                                            count++;
                                        }

                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No City added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<UserDialog @ref="userDialog"
            HandleSaveOperationEvent="HandleSaveOperationEvent"
            ManageUser="ManageUser"
            SystemRoles="SystemRoles"
            />
<style>
    .cursorStyle {
    cursor: pointer;
    }
</style>
@code {
    ManageUser ManageUser = new();
    UserDialog? userDialog;

    public string Title { get; set; } = "Add";
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
        await GetUsers();
        allState.Action += StateHasChanged;
    }
    public async Task GetRoles()
    {
        ManageUsers = await accountService.GetUsers();
    }
    public async Task GetUsers()
    {
        SystemRoles = await accountService.GetRoles();
    }

    // void AddButtonClicked()
    // {
    //     City = new();
    //     cityDialog?.ChangeTitle("Add");
    //     OpenDialog();
    // }


    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }

    public async Task HandleSaveOperationEvent(ManageUser user)
    {
        var result = await accountService.UpdateUser(user);
        bool successCheck = await DisplayMessage(result.Flag,result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
            userDialog!.IsVisible = false;
        }

    }
    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }
    private async Task DeleteClicked(ManageUser user)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {user.Name}", "Confirm Delete!");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetUsers(); 
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

}
