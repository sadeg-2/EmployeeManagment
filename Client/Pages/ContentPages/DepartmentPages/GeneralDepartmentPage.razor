@implements IDisposable

@if (allState.ShowGeneralDepartment)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">General Department</h4>
                        <button class="btn btn-outline-success float-end" @onclick=OpenDialog >
                            <i class="bi bi-plus-circle-dotted"></i>
                            Add Department
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">General Department</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (GeneralDepartments is not null)
                                    {
                                        int count = 1;
                                        foreach(var item in GeneralDepartments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                    @onclick="()=> EditClicked(item)"
                                                    ></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                    @onclick="()=> DeleteClicked(item)"
                                                    ></i>
                                                </td>
                                            </tr>

                                            count++;
                                        }

                                    }


                                </tbody>

                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<GeneralDepartmentDialog @ref="generalDepartmentDialog" 
HandleSaveOperationEvent="HandleSaveOperationEvent"
GeneralDepartment="GeneralDepartment"
/>

<style>
    .cursorStyle{
        cursor:pointer;
    }
</style>
@code{
    GeneralDepartment GeneralDepartment = new();
    GeneralDepartmentDialog? generalDepartmentDialog;

    public string Title { get; set; } = "Add";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetGeneralDepartment();
        allState.Action += StateHasChanged;
    }
    public async Task GetGeneralDepartment()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl); 
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    void OpenDialog()
    {
        generalDepartmentDialog?.OpenDialog();
    }

    public async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if(generalDepartment.Id > 0)
        {
            var response = await generalDepartmentService.
            Update(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag,response.Message);
        }
        else
        {
            var response = await generalDepartmentService.
           Insert(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartment();
            generalDepartmentDialog?.ChangeTitle("Add");
            generalDepartmentDialog!.IsVisible = false;
        }

    }
    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        GeneralDepartment = dep;
        OpenDialog();
    } 
    private async Task DeleteClicked(GeneralDepartment dep)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}","Confirm Delete!");
        if (!confirm) return;

        var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
        if(await DisplayMessage(response.Flag,response.Message))
            await GetGeneralDepartment();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }    
    }

}
