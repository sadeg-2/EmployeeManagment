<MudDialog>
    <TitleContent>
        @Title Branch
    </TitleContent>
    <DialogContent>
        <EditForm Model="@branch">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Id" @bind-value="branch.Id" ReadOnly=true />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="int" Label="Department"
                               @bind-Value="branch.DepartmentId"
                               Dense="true" Required="true">
                        <MudSelectItem Value="0" Disabled="true">Select one...</MudSelectItem>

                        @foreach (var dept in Departments)
                        {
                            <MudSelectItem Value="@dept.Id">@dept.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="branch.Name" Label="Name" Required="true" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="Save">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public Branch branch { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public EventCallback<Branch> HandleSaveOperationEvent { get; set; }

    async void Save()
    {
        if (string.IsNullOrEmpty(branch.Name) || branch.DepartmentId <= 0)
        {
            Snackbar.Add("You Need to provide Departmen & Branch Name", Severity.Warning);
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(branch);
            MudDialog.Close(DialogResult.Ok("Done"));
            // StateHasChanged();
        }
    }
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();
}

@* 
@code {
    [Parameter] public Branch Branch { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public EventCallback<Branch> HandleSaveOperationEvent { get; set; }

    public bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }
    async void Save()
    {
        if (string.IsNullOrEmpty(Branch.Name) || Branch.DepartmentId <= 0)
        {
            await dialogService.AlertAsync("You Need to provide Branch Name", "Alert!");
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(Branch);
        }
    }
    public void ChangeTitle(string title)
    {
        Title = title;
    }
    public void OnValueChange(ChangeEventArgs<string, Department> args)
    {
        Branch.DepartmentId = int.Parse(args.Value);
    }

}
 *@