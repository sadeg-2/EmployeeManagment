 @implements IDisposable
@if (allState.ShowBranch)
{
    <br />
    <br />
    <MudTable Items="filteredBranches"
    Hover="true"
    SortLabel="Sort By"
    Elevation="4"
    AllowUnsorted="false"
    Striped="true"
    Bordered="true"
    Dense="true"
    Class="p-4">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Branches</MudText>
            <MudSpacer />
            <MudTextField T="string"
            Immediate="true"
            Value="@searchString1"
            ValueChanged="OnSearchChanged"
            Placeholder="Search"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search"
            IconSize="Size.Medium"
            Class="mt-0" />
            <MudSpacer />
            <MudButton @onclick="AddItem" Variant="Variant.Filled" Color="Color.Primary">
                Add Branch
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Branch, object>(x=>x.Department!.Name)">Department</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@((filteredBranches?.ToList().IndexOf(context) ?? -1) + 1)</MudTd>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.Department!.Name</MudTd>
            <MudTd DataLabel="Action">
                <i class="bi bi-pencil text-info" id="cursorStyle"
                @onclick="()=> EditClicked(context)"></i>
                <i class="bi bi-trash text-danger" id="cursorStyle"
                @onclick="()=> DeleteClicked(context)"></i>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudTd ColSpan="4" Align="Align.Center">
                <MudText Typo="Typo.body1">No matching data found.                                                     </MudText>
            </MudTd>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20,30}" />
        </PagerContent>
    </MudTable>
}
@code {
    public string Title { get; set; }

    // for add or update
    public Branch branch { get; set; } = new();

    // for get branch Data
    private List<Branch>? branches = new();

    //for using selector
    private List<Department>? departments = new();

    // for show data with filtering
    private IEnumerable<Branch>? filteredBranches => branches.Where(FilterFunc);
    private string _filterText = string.Empty;

    private string searchString1 = "";
    protected override async Task OnInitializedAsync()
    {
        await GetDepartment();
        await GetBranches();
        allState.Action += StateHasChanged;
    }

    public async Task GetDepartment()
    {
        departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }
    public async Task GetBranches()
    {
        branches = await branchService.GetAll(Constants.BrancBaseUrl);
    }   

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    private Task OnSearchChanged(string text)
    {
        searchString1 = text;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private bool FilterFunc(Branch element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.Name!.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Department!.Name.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private Task OpenDialogAsync()
    {
        var parameters = new DialogParameters()
            {
                ["Title"] = Title,
                ["branch"] = branch,
                ["departments"] = departments,
                ["HandleSaveOperationEvent"] = EventCallback.Factory.Create(this,
                                new Func<Branch, Task>(HandleSaveOperationEvent))
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<BranchDialog>("Add", parameters, options);
    }

    public async Task HandleSaveOperationEvent(Branch branch)
    {
        bool successCheck = false;
        if (branch.Id > 0)
        {
            var response = await branchService.
            Update(branch, Constants.BrancBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await branchService.
           Insert(branch, Constants.BrancBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            branch = new();
            await GetBranches();
        }

    }



    private void EditClicked(Branch br)
    {
        branch = br;
        Title = "Update";
        OpenDialogAsync();
    }
    private void AddItem()
    {
        branch = new();
        Title = "Add";
        OpenDialogAsync();
    }
    private async Task DeleteClicked(Branch br)
    {

        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you wanna delete {br.Name}",
                ["ButtonText"] = "Yes",
                ["Color"] = Color.Error
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete!", parameters, options);
        var result = await dialog.Result;

        if (result!.Canceled)
        {
            Snackbar.Add("Canceled", Severity.Error);
            return;
        }

        var response = await branchService.DeleteById(br.Id, Constants.BrancBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetBranches();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            Snackbar.Add(message, Severity.Success);
            return true;
        }
        else
        {
            Snackbar.Add(message, Severity.Error);
            return false;
        }
    }

}