<MudDialog>
    <TitleContent>
        @Title Department
    </TitleContent>
    <DialogContent>
        <EditForm Model="@department">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Id" @bind-value="department.Id" ReadOnly=true />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="int" Label="General Department"
                               @bind-Value="department.GeneralDepartmentId"
                               Dense="true" Required="true">
                        <MudSelectItem Value="0" Disabled="true">Select one...</MudSelectItem>

                        @foreach (var dept in generalDepartments)
                        {
                            <MudSelectItem Value="@dept.Id">@dept.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="department.Name" Label="Name" Required="true" />
                </MudItem>
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="Save">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Department department { get; set; } = new();
    [Parameter] public string Title { get; set; }
    [Parameter] public List<GeneralDepartment> generalDepartments { get; set; } = new();
    [Parameter] public EventCallback<Department> HandleSaveOperationEvent { get; set; }

    async void Save()
    {
        if (string.IsNullOrEmpty(department.Name) || department.GeneralDepartmentId <= 0)
        {
            Snackbar.Add("You Need to provide Department Name", Severity.Warning);
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(department);
            MudDialog.Close(DialogResult.Ok("Done"));
            // StateHasChanged();
        }
    }
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();
}