@implements IDisposable

@if (allState.ShowTown)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Town</h4>
                        <button class="btn btn-outline-success float-end" @onclick=AddButtonClicked>
                            <i class="bi bi-plus-circle-dotted"></i>
                            Add Town
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px;overflow-x:hidden;overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Town</th>
                                        <th scope="col">City</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Towns is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Towns)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.City!.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle"
                                                       @onclick="()=> EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle"
                                                       @onclick="()=> DeleteClicked(item)"></i>
                                                </td>
                                            </tr>

                                            count++;
                                        }

                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">No City added yet!</div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<TownDialog @ref="townDialog"
            HandleSaveOperationEvent="HandleSaveOperationEvent"
            Cities="Cities"
            Town="Town" />
<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>
@code {
    Town Town = new();
    TownDialog? townDialog;

    public string Title { get; set; } = "Add";
    public List<City> Cities { get; set; } = new();
    public List<Town> Towns { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTowns();
        await GetCities();
        allState.Action += StateHasChanged;
    }
    public async Task GetTowns()
    {
        Towns = await townService.GetAll(Constants.TownBaseUrl);
    }
    public async Task GetCities()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    void AddButtonClicked()
    {
        Town = new();
        townDialog?.ChangeTitle("Add");
        OpenDialog();
    }


    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    void OpenDialog()
    {
        townDialog?.OpenDialog();
    }

    public async Task HandleSaveOperationEvent(Town town)
    {
        bool successCheck = false;
        if (town.Id > 0)
        {
            var response = await townService.
            Update(town, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await townService.
           Insert(town, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Town = new();
            await GetTowns();
            townDialog?.ChangeTitle("Add");
            townDialog!.IsVisible = false;
        }

    }
    private void EditClicked(Town town)
    {
        townDialog?.ChangeTitle("Update");
        Town = town;
        OpenDialog();
    }
    private async Task DeleteClicked(Town town)
    {
        var confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {town.Name}", "Confirm Delete!");
        if (!confirm) return;

        var response = await townService.DeleteById(town.Id, Constants.TownBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetTowns();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

}
