 @implements IDisposable
@if (allState.ShowTown)
{
    <br />
    <br />
    <MudTable Items="filteredTowns"
              Hover="true"
              SortLabel="Sort By"
              Elevation="4"
              AllowUnsorted="false"
              Striped="true"
              Bordered="true"
              Dense="true"
              Class="p-4">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Towns</MudText>
            <MudSpacer />
            <MudTextField T="string"
                          Immediate="true"
                          Value="@searchString1"
                          ValueChanged="OnSearchChanged"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0" />
            <MudSpacer />
            <MudButton @onclick="AddItem" Variant="Variant.Filled" Color="Color.Primary">
                Add Town
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Town, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Town, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Town, object>(x=>x.City!.Name)">City</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@((filteredTowns?.ToList().IndexOf(context) ?? -1) + 1)</MudTd>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.City!.Name</MudTd>
            <MudTd DataLabel="Action">
                <i class="bi bi-pencil text-info" id="cursorStyle"
                   @onclick="()=> EditClicked(context)"></i>
                <i class="bi bi-trash text-danger" id="cursorStyle"
                   @onclick="()=> DeleteClicked(context)"></i>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudTd ColSpan="4" Align="Align.Center">
                <MudText Typo="Typo.body1">No matching data found.                                                     </MudText>
            </MudTd>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20,30}" />
        </PagerContent>
    </MudTable>
}
@code {
    public string Title { get; set; } = "Add";
    // for add or update
    public Town town { get; set; } = new();

    //for get data
    private List<Town>? towns = new();

    // for using selector
    public List<City> cities { get; set; } = new();

    // for show data with filtering
    private IEnumerable<Town>? filteredTowns => towns.Where(FilterFunc);
    private string _filterText = string.Empty;

    private string searchString1 = "";
    protected override async Task OnInitializedAsync()
    {
        await GetCities();
        await GetTowns();
        allState.Action += StateHasChanged;
    }
    public async Task GetCities()
    {
        cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    public async Task GetTowns()
    {
        towns = await townService.GetAll(Constants.TownBaseUrl);
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    private Task OnSearchChanged(string text)
    {
        searchString1 = text;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private bool FilterFunc(Town element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.Name!.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.City!.Name.ToString().Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private Task OpenDialogAsync()
    {
        var parameters = new DialogParameters()
            {
                ["Title"] = Title,
                ["town"] = town,
                ["cities"] = cities,
                ["HandleSaveOperationEvent"] = EventCallback.Factory.Create(this,
                                    new Func<Town, Task>(HandleSaveOperationEvent))
            };


        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<TownDialog>("Add", parameters, options);
    }

    public async Task HandleSaveOperationEvent(Town t)
    {
        bool successCheck = false;
        if (t.Id > 0)
        {
            var response = await townService.
            Update(t, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await townService.
           Insert(t, Constants.TownBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            town = new();
            await GetTowns();
        }

    }
    private void EditClicked(Town t)
    {
        town = t;
        Title = "Update";
        OpenDialogAsync();
    }
    private void AddItem()
    {
        town = new();
        Title = "Add";
        OpenDialogAsync();
    }
    private async Task DeleteClicked(Town t)
    {

        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you wanna delete {t.Name}",
                ["ButtonText"] = "Yes",
                ["Color"] = Color.Error
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete!", parameters, options);
        var result = await dialog.Result;

        if (result!.Canceled)
        {
            Snackbar.Add("Canceled", Severity.Error);
            return;
        }

        var response = await townService.DeleteById(t.Id, Constants.TownBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetTowns();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            Snackbar.Add(message, Severity.Success);
            return true;
        }
        else
        {
            Snackbar.Add(message, Severity.Error);
            return false;
        }
    }

}