@implements IDisposable
@if (ShowAddOrUpdateEmployee)
{
    <div class="container">
        <div class="row mt-5">
            <div class="col-log-1 text-right" >
                <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer" @onclick=CloseForm></i>
            </div>
            <div class="col-lg-5 text-center"><h2>@Title Employee</h2></div>
        </div>
        <div class="row">
            <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                <div class="hstack">
                    @if (FirstLayer)
                    {
                        <div class="@FloatingDiv1 format-border"></div>
                        <div class="@FloatingNumber1 text-center">1</div>
                        <div class="@FloatingDiv2 format-border"></div>
                        <div class="@FloatingNumber2 text-center">2</div>
                    }
                    @if (SecondLayer)
                    {
                        <div class="@FloatingDiv1 format-border"></div>
                        <div class="@FloatingNumber1 text-center">1</div>
                        <div class="@FloatingDiv2 format-border"></div>
                        <div class="@FloatingNumber2 text-center">2</div>
                    }
                </div>
            </div>
            <div class="col-lg-12">
                <div class="container-fluid">
                    @if (FirstLayer)
                    {
                        <EditForm Enhance Model="EmployeeGroup1" OnValidSubmit="Form1">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-lg-2"></div>
                                <div class="col-lg-4">
                                    <div class="card-title mb-5 fw-bold " style="font-family:Tahoma">Personal Information</div>
                                    <div class="card-body">
                                        <div class="form-group">
                                            <label class="form-label">Full Name</label>
                                            <InputText class="form-control" @bind-Value="EmployeeGroup1.Name" />
                                            <ValidationMessage For="()=> EmployeeGroup1.Name" class="text-danger" />
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Telephone Number</label>
                                            <InputText class="form-control" @bind-Value="EmployeeGroup1.TelephoneNumber" />
                                            <ValidationMessage For="()=> EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                        </div>
                                        <div class="form-group">
                                            <label class="form-label">Address</label>
                                            <InputText class="form-control" @bind-Value="EmployeeGroup1.Address" />
                                            <ValidationMessage For="()=> EmployeeGroup1.Address" class="text-danger" />
                                        </div>
                                        <div class="form-control mt-2">
                                            <img src="@Employee.Photo" width="100" height="100" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4 mt-2">
                                    <div class="card-title mb-5 fw-bold " style="font-family:Tahoma">Other Information</div>
                                    <div class="form-group">
                                        <label class="form-label">Civil Id</label>
                                        <InputText class="form-control" @bind-Value=EmployeeGroup1.CivilId />
                                        <ValidationMessage For="()=> EmployeeGroup1.CivilId" class="text-danger" />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">File Number</label>
                                        <InputText class="form-control" @bind-Value=EmployeeGroup1.FileNumber />
                                        <ValidationMessage For="()=> EmployeeGroup1.FileNumber" class="text-danger" />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label @(ImageUploadMessage==""? "" : "text-danger")">
                                            @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)

                                        </label>
                                        <InputFile class="form-control" OnChange="UploadImage" />
                                        <ValidationMessage For="()=> EmployeeGroup1.Photo" class="text-danger" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                            <i class="bi bi-arrow-right"></i>
                                            Next
                                        </button>
                                    </div>
                                </div>
                                <div class="col-lg-2"></div>
                            </div>
                        </EditForm>
                    }
                    @if (SecondLayer)
                    {
                        <EditForm Enhance Model="EmployeeGroup2" OnValidSubmit="Form2">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-lg-2"></div>
                                <div class="col-lg-4">
                                    <div class="card-title mb-5 fw-bold " style="font-family:Tahoma">Job Information</div>
                                    <div class="card-body">
                                        <div class="form-group">
                                            <label class="form-label">Job Name</label>
                                            <InputText class="form-control" @bind-Value="EmployeeGroup2.JobName" />
                                            <ValidationMessage For="()=> EmployeeGroup2.JobName" class="text-danger" />
                                        </div>
                                        <div class="form-group mt-3">
                                            @{
                                                string generalDepartment = GeneralDepartmentName.Equals("") ? "Select General Department" : GeneralDepartmentName;
                                            }
                                            <MudItem xs="12">
                                                <MudSelect T="int" Label="General Department"
                                                ValueChanged="OnGeneralDepartmentValueChange"
                                                Dense="true"
                                                Required="true">
                                                    <MudSelectItem Value="0" Disabled="true">@generalDepartment</MudSelectItem>

                                                    @foreach (var dept in GeneralDepartments)
                                                    {
                                                        <MudSelectItem Value="@dept.Id">@dept.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </div>
                                        <div class="form-group mt-3">
                                            @{
                                                string department = DepartmentName.Equals("") ? "Select Department" : DepartmentName;
                                            }
                                            <MudItem xs="12">
                                                <MudSelect T="int" Label="Department"
                                                ValueChanged="OnDepartmentValueChange"
                                                Dense="true"
                                                Required="true">
                                                    <MudSelectItem Value="0" Disabled="true">@department</MudSelectItem>

                                                    @foreach (var dept in Departments)
                                                    {
                                                        <MudSelectItem Value="@dept.Id">@dept.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                        </div>
                                        <div class="form-group mt-3">
                                            @{
                                                string branch = BranchName.Equals("") ? "Select Branch" : BranchName;
                                            }
                                            <label class="form-label">Select Branch</label>
                                            <MudItem xs="12">
                                                <MudSelect T="int" Label="Branch"
                                                ValueChanged="OnBranchValueChange"
                                                Dense="true"
                                                Required="true">
                                                    <MudSelectItem Value="0" Disabled="true">@branch</MudSelectItem>

                                                    @foreach (var br in Branches)
                                                    {
                                                        <MudSelectItem Value="@br.Id">@br.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            <ValidationMessage For="()=> EmployeeGroup2.BranchId" class="text-danger    "></ValidationMessage>
                                        </div>
                                        <div class="form-group mt-5">
                                            <button class="btn btn-primary float-end mt-4 mb-5" type="button" @onclick="PrevClicked">
                                                <i class="bi bi-arrow-left"></i>
                                                Prev
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4 mt-2">
                                    <div class="card-title mb-5 fw-bold " style="font-family:Tahoma">Location Information</div>
                                    <div class="form-group mt-3">
                                        @{
                                            string country = CountryName.Equals("") ? "Select Country" : CountryName;
                                        }
                                        <label class="form-label">Select Country</label>
                                        <MudItem xs="12">
                                            <MudSelect T="int" Label="Country"
                                            ValueChanged="OnCountryValueChange"
                                            Dense="true"
                                            Required="true">
                                                <MudSelectItem Value="0" Disabled="true">@country</MudSelectItem>

                                                @foreach (var country in Countries)
                                                {
                                                    <MudSelectItem Value="@country.Id">@country.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            string city = CityName.Equals("") ? "Select City" : CityName;
                                        }
                                        <label class="form-label">Select City</label>
                                        <MudItem xs="12">
                                            <MudSelect T="int" Label="City"
                                            ValueChanged="OnCityValueChange"
                                            Dense="true"
                                            Required="true">
                                                <MudSelectItem Value="0" Disabled="true">@city</MudSelectItem>

                                                @foreach (var city in Cities)
                                                {
                                                    <MudSelectItem Value="@city.Id">@city.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </div>
                                    <div class="form-group mt-3">
                                        @{
                                            string town = TownName.Equals("") ? "Select Town" : TownName;
                                        }
                                        <label class="form-label">Select Town</label>
                                        <MudItem xs="12">
                                            <MudSelect T="int" Label="Town"
                                            ValueChanged="OnTownValueChange"
                                            Dense="true"
                                            Required="true">
                                                <MudSelectItem Value="0" Disabled="true">@town</MudSelectItem>

                                                @foreach (var town in Towns)
                                                {
                                                    <MudSelectItem Value="@town.Id">@town.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                        <ValidationMessage For="()=> EmployeeGroup2.TownId" class="text-danger"></ValidationMessage>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label class="form-label">Other</label>
                                        <textarea @bind="EmployeeGroup2.Other" class="form-control" placeholder="Optional" />
                                    </div>
                                    <div class="form-group mt-5">
                                        <button class="btn btn-primary float-end" type="submit">
                                            <i class="bi bi-save"></i>
                                            Save
                                        </button>
                                    </div>
                                </div>
                                <div class="col-lg-2"></div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>

}

<style>
    .floatingDiv {
    width: 500px;
    background: #228ada;
    height: 10px;
    }

    .floatingNumber {
    width: 20px;
    background: #1d1858;
    height: 20px;
    color: white;
    border-radius: 50%;
    }

    .inactive-div {
    width: 500px;
    background: gray;
    height: 10px;
    }

    .inactive-span {
    width: 20px;
    background: gray;
    height: 20px;
    color: white;
    border-radius: 50%;
    }

    .format-border {
    border-radius: 20px;
    }
</style>
@code {
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; } = false;

    [Parameter] public EmployeeGroup1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGroup2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    [Parameter] public Employee Employee { get; set; } = new();

    public string Title { get; set; } = "Add";

    public string GeneralDepartmentName { get; set; } = "";
    public string DepartmentName { get; set; } = "";
    public string BranchName { get; set; } = "";

    public string CountryName { get; set; } = "";
    public string CityName { get; set; } = "";
    public string TownName { get; set; } = "";

    string FloatingNumber1 = "floatingNumber";
    string FloatingDiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string FloatingDiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
        FloatingNumber2 = "floatingNumber";
        FloatingDiv2 = "floatingDiv";

    }
    private void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
        FloatingNumber2 = "inactive-span";
        FloatingDiv2 = "inactive-div";
    }
    [Parameter] public EventCallback NotifyParentFromCloseClicked { get; set; }

    async Task CloseForm()
    {
        FloatingNumber2 = "inactive-span";
        FloatingDiv2 = "inactive-div";
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFromCloseClicked.InvokeAsync();
    }

    //File Upload
    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }
        ImageUploadMessage = "Png File Needed";
        return;
    }

    // Validation Form
    private bool ValidateEmployeeGroup1()
    {
        if (
            string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber) ||
            string.IsNullOrEmpty(EmployeeGroup1.FileNumber) ||
            string.IsNullOrEmpty(EmployeeGroup1.Name) ||
            string.IsNullOrEmpty(EmployeeGroup1.Address) ||
            string.IsNullOrEmpty(EmployeeGroup1.Photo) ||
            string.IsNullOrEmpty(EmployeeGroup1.CivilId)
        ) return false;
        else return true;
    }
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName) ||
        EmployeeGroup2.TownId == 0 ||
        EmployeeGroup2.BranchId == 0)
            return false;
        else return true;
    }
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeEventClicked { get; set; }
    private void Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.Address = EmployeeGroup1.Address;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = "EmployeeGroup1.Photo";
            Employee.CivilId = EmployeeGroup1.CivilId;
            ShowLayer2();
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.TownId = EmployeeGroup2.TownId;
            Employee.BranchId = EmployeeGroup2.BranchId;
            await HandleSaveEmployeeEventClicked.InvokeAsync(Employee);

        }
    }

    public void ClearContent()
    {
        Employee = new();
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        GeneralDepartmentName = "";
        DepartmentName="";
        BranchName="";
        CountryName="";
        CityName="";
        TownName = "";
        StateHasChanged();
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }


    // Country , City , Town

    [Parameter] public EventCallback<int> HandleCountySelectedEvent { get; set; }
    public void OnCountryValueChange(int args)
    {
        HandleCountySelectedEvent.InvokeAsync(args);
    }

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    public void OnCityValueChange(int args)
    {
        HandleCitySelectedEvent.InvokeAsync(args);
    }

    public void OnTownValueChange(int args)
    {
        EmployeeGroup2.TownId = args;
    }


    // // General Dep / Dep / Branch
     [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    public void OnGeneralDepartmentValueChange(int args)
    {
        HandleGeneralDepartmentSelectedEvent.InvokeAsync(args);
    }

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    public void OnDepartmentValueChange(int args)
    {
        HandleDepartmentSelectedEvent.InvokeAsync(args);
    }

    public void OnBranchValueChange(int args)
    {
        EmployeeGroup2.BranchId = args;
    }
}